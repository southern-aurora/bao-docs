import{_ as s,o as n,c as a,Q as o}from"./chunks/framework.b8c8dad6.js";const h=JSON.parse('{"title":"Config","description":"","frontmatter":{"title":"Config"},"headers":[],"relativePath":"markdown/docs/config.md","filePath":"markdown/docs/config.md"}'),l={name:"markdown/docs/config.md"},p=o(`<h1 id="config" tabindex="-1">Config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;Config&quot;">​</a></h1><p>我们经常需要存储各种配置，比如，与数据库的连接信息、各种秘钥。配置的获取渠道也各有不同，也许是硬编码，也许是 <code>.env</code> 文件，也许是环境变量。</p><h2 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h2><p>我们约定俗成，将配置写在 <code>/src/config</code> 目录中，此目录没有&quot;魔法&quot;。</p><p>我们约定俗成，配置文件导出一个以 <code>config</code> 开头的对象，就像这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configExample</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configExample</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  hello: </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>在其他任意位置，我们都可以通过直接导入这个对象，来读取配置。</p><h2 id="读取环境变量" tabindex="-1">读取环境变量 <a class="header-anchor" href="#读取环境变量" aria-label="Permalink to &quot;读取环境变量&quot;">​</a></h2><p>环境变量是一种常见的配置方式，但是环境变量没有类型，因此我们读取到的环境变量都是字符串。</p><p>Bao 提供了一些方法，来帮助你将环境变量字符串转为相应的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { env } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node:process&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { envToBoolean, envToNumber, envToString } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">configExample</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fooNumber: </span><span style="color:#B392F0;">envToNumber</span><span style="color:#E1E4E8;">(env.</span><span style="color:#79B8FF;">FOO</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9000</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  barBoolean: </span><span style="color:#B392F0;">envToBoolean</span><span style="color:#E1E4E8;">(env.</span><span style="color:#79B8FF;">BAR</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  BazString: </span><span style="color:#B392F0;">envToString</span><span style="color:#E1E4E8;">(env.</span><span style="color:#79B8FF;">BAZ</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;hello-world&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// file: /src/config/example.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { env } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node:process&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { envToBoolean, envToNumber, envToString } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">configExample</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  fooNumber: </span><span style="color:#6F42C1;">envToNumber</span><span style="color:#24292E;">(env.</span><span style="color:#005CC5;">FOO</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9000</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  barBoolean: </span><span style="color:#6F42C1;">envToBoolean</span><span style="color:#24292E;">(env.</span><span style="color:#005CC5;">BAR</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  BazString: </span><span style="color:#6F42C1;">envToString</span><span style="color:#24292E;">(env.</span><span style="color:#005CC5;">BAZ</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;hello-world&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="读取-env-文件" tabindex="-1">读取 .env 文件 <a class="header-anchor" href="#读取-env-文件" aria-label="Permalink to &quot;读取 .env 文件&quot;">​</a></h2><p>如果想要自动读取项目根目录下的 <code>.env</code> 文件，并将其注入到 <code>p<wbr>rocess.env</code> 中，可以在你的 <code>/index.ts</code> 顶部添加如下代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao/load-env-file&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao/load-env-file&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>在 Bao 的 <code>.env</code> 文件中，不会对内容进行任何形式的转义，因此，你不需要为 <code>.env</code> 文件中的内容添加引号。</p>`,15),e=[p];function t(c,r,E,i,y,d){return n(),a("div",null,e)}const v=s(l,[["render",t]]);export{h as __pageData,v as default};
