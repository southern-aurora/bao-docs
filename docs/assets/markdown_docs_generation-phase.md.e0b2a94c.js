import{_ as e,o as a,c as o,Q as t}from"./chunks/framework.f6f75689.js";const u=JSON.parse('{"title":"生成阶段","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/docs/generation-phase.md","filePath":"markdown/docs/generation-phase.md"}'),r={name:"markdown/docs/generation-phase.md"},c=t('<h1 id="生成阶段" tabindex="-1">生成阶段 <a class="header-anchor" href="#生成阶段" aria-label="Permalink to &quot;生成阶段&quot;">​</a></h1><p>Bao 在启动前，会进入生成阶段。</p><p>生成阶段是完成你创建一个文件后，无需编写代码就可以直接访问的&quot;魔法&quot;的来源。当你创建了新的 Api 或修改了 Api 所需的参数后，需要重新运行 Bao，来重新执行生成阶段来更新你的更改。而当你修改了代码逻辑时，得益于 Bun 的热更新功能，你无需重启 Bao，即可直接看到修改后的效果。</p><h2 id="细节" tabindex="-1">细节 <a class="header-anchor" href="#细节" aria-label="Permalink to &quot;细节&quot;">​</a></h2><p>具体而言，生成阶段会完成以下几件事：</p><ul><li><p>递归扫描你的 <code>/src/app</code> 目录，并将你的 Api 的概要，生成在 <code>/generate/schema.ts</code> 文件中。每次有新的请求时，会尝试从这个文件中匹配所对应的 Api 并执行。</p></li><li><p>单层扫描你的 <code>/src/bootstrap</code> 目录，并将你的 Bootstrap 的概要，生成在 <code>/generate/schema.ts</code> 文件中。每次 Bao 启动时，会尝试执行你所有的 Bootstrap 中的代码。</p></li><li><p>将你所有的的 Api 的所有的 params 的校验代码，生成在 <code>/generate/products/api-params.ts</code> 文件中。由它来保障，你的 Api 参数的类型安全与数据校验。</p></li><li><p>重新构建客户端，将你位于 <code>/package/client</code> 目录中的客户端，使用最新的生成数据进行重新构建。此时，对于使用此包的前端工程，无需重新构建，即可直接使用最新的客户端。</p></li></ul>',6),s=[c];function p(i,n,d,l,_,h){return a(),o("div",null,s)}const f=e(r,[["render",p]]);export{u as __pageData,f as default};
