import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.b8c8dad6.js";const u=JSON.parse('{"title":"Logger","description":"","frontmatter":{"title":"Logger"},"headers":[],"relativePath":"markdown/docs/logger.md","filePath":"markdown/docs/logger.md"}'),l={name:"markdown/docs/logger.md"},p=o(`<h1 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h1><p>日志对应用线上产生的问题排查非常重要，虽然可以使用 <code>console</code> 打印日志，但我们可能会有更多的日志需求。比如，本地调试时，将日志打印在终端中，而在生产环境中，不在终端打印以节省性能，并将日志保存到文件中，或者，将日志发送到云服务商的日志系统中。</p><p>Bao 提供了一个日志记录器，可以帮助你解决这些问题。Bao 本身的日志，也是通过日志记录器来写入的。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>我们可以随时通过 <code>useLogger</code> 方法来创建一个日志记录器，它需要一个 <code>executeId</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLogger</span><span style="color:#E1E4E8;">(context.executeId);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLogger</span><span style="color:#24292E;">(context.executeId);</span></span></code></pre></div><p>我们可以使用它写入任何等级的日志。看起来，它的用法和几乎 <code>console</code> 一样。略有不同的是，日志的第一个参数必须总是 <code>string</code> 格式，用于描述日志的信息，被称为 &quot;日志描述&quot;。第二个参数开始则允许传入任意类型的参数，它们被称为 &quot;日志参数&quot;。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Your Message&quot;</span><span style="color:#E1E4E8;">, { hello: </span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Your Message&quot;</span><span style="color:#24292E;">, { hello: </span><span style="color:#032F62;">&quot;world&quot;</span><span style="color:#24292E;"> });</span></span></code></pre></div><h3 id="executeid" tabindex="-1">executeId <a class="header-anchor" href="#executeid" aria-label="Permalink to &quot;executeId&quot;">​</a></h3><p>使用日志记录器需要传入 <code>executeId</code>，它来自你 Api 的 <code>context</code> 对象，它是唯一的。对于每个请求来说，都是不相同的。Bao 的日志记录器通过它们来区分不同的请求。</p><p>在较高并发的场景下，不同用户会在同一时间向你发送请求。这意味着，不同用户请求的日志将交替出现。当出现问题时，我们往往无法定位一条日志属于哪个请求，这为我们在生产环境中的除错带来了很大的困扰。因此，我们非常建议你传入 <code>executeId</code>。但是，在某些特殊场景下，你可能无法取到它。这个时候，你可以传入 <code>global</code>，日志记录器会向所有并发中的请求，同时写入这条日志。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLogger</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;global&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLogger</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;global&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="完整例子" tabindex="-1">完整例子 <a class="header-anchor" href="#完整例子" aria-label="Permalink to &quot;完整例子&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// file: /src/app/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useLogger, defineApi } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">helloWorld</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineApi</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  meta: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">params</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {}, </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useLogger</span><span style="color:#E1E4E8;">(context.executeId);</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    logger.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello world!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;">// file: /src/app/api.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useLogger, defineApi } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">helloWorld</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineApi</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  meta: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">action</span><span style="color:#24292E;">(</span><span style="color:#E36209;">params</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {}, </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line highlighted"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">logger</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useLogger</span><span style="color:#24292E;">(context.executeId);</span></span>
<span class="line highlighted"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line highlighted"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line highlighted"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line highlighted"><span style="color:#24292E;">    logger.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello world!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="日志标签" tabindex="-1">日志标签 <a class="header-anchor" href="#日志标签" aria-label="Permalink to &quot;日志标签&quot;">​</a></h2><p>除了打印日志之外，你还可以为一个请求打上日志标签。通过 <code>loggerPushTags</code> 方法，可以为某个请求添加若干自定义标签。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { loggerPushTags } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">loggerPushTags</span><span style="color:#E1E4E8;">(executeId, { userInfo: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">, permissions: </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { loggerPushTags } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">loggerPushTags</span><span style="color:#24292E;">(executeId, { userInfo: </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">, permissions: </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> });</span></span></code></pre></div><p>在以往的日志中，我们往往会把请求的所属用户信息、权限等数据直接输出到日志中，这会掩埋我们的关键信息。合理的使用标签，有助于让你的日志只有关键信息，变得更加易读。</p><h2 id="原有日志标签" tabindex="-1">原有日志标签 <a class="header-anchor" href="#原有日志标签" aria-label="Permalink to &quot;原有日志标签&quot;">​</a></h2><p>Bao 会为你的每个请求打上若干日志标签。通常，会存在这些：</p><table><thead><tr><th style="text-align:right;">Key</th><th>Value</th></tr></thead><tbody><tr><td style="text-align:right;"><code>from</code></td><td>来源 &quot;http-server&quot; | &quot;execute&quot;</td></tr><tr><td style="text-align:right;"><code>executeId</code></td><td>执行此请求的唯一 id</td></tr><tr><td style="text-align:right;"><code>method</code></td><td>请求方式</td></tr><tr><td style="text-align:right;"><code>ip</code></td><td>请求发起者的 IP 地址</td></tr><tr><td style="text-align:right;"><code>url</code></td><td>请求地址</td></tr><tr><td style="text-align:right;"><code>params</code></td><td>请求的参数 (Object)</td></tr><tr><td style="text-align:right;"><code>body</code></td><td>最终响应的数据 (Raw String)</td></tr><tr><td style="text-align:right;"><code>timein</code></td><td>接收到请求的时间 (Number)</td></tr><tr><td style="text-align:right;"><code>timeout</code></td><td>请求响应的时间 (Number)</td></tr><tr><td style="text-align:right;"><code>requestHeaders</code></td><td>请求头 (Object)</td></tr><tr><td style="text-align:right;"><code>responseHeaders</code></td><td>响应头 (Object)</td></tr></tbody></table><p>注意，你不能认为这些日志标签总是存在的，例如，在一些极端情况，请求直接被终止时，可能 <code>body</code>、<code>params</code>、<code>responseHeaders</code> 等内容不会被添加。以及，当通过编写 <code>execute</code> 代码，而非发送 <code>HTTP</code> 请求的方式调用时，诸如 <code>ip</code> 等数据将会不存在，同时也会获得一些其他的值。</p><h2 id="自定义日志记录器" tabindex="-1">自定义日志记录器 <a class="header-anchor" href="#自定义日志记录器" aria-label="Permalink to &quot;自定义日志记录器&quot;">​</a></h2><p>你可以自由修改 <code>/src/logger.ts</code> 来自定义日志记录器的行为。默认情况下，正如代码编写所示，你的日志记录器会在控制台中直接显示你的日志。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// file: /src/logger.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> LoggerOptions, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> ExecuteId } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loggerOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onInsert</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#E1E4E8;">    console[options.loggerLevel](options.description, </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">options.params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">onSubmit</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">tags</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">logs</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`🧊 Bao Responsed! by :\`</span><span style="color:#E1E4E8;">, tags.url);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">(tags));</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">satisfies</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LoggerOptions</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// file: /src/logger.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> LoggerOptions, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> ExecuteId } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">loggerOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onInsert</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#24292E;">    console[options.loggerLevel](options.description, </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">options.params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">onSubmit</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">tags</span><span style="color:#24292E;">, </span><span style="color:#E36209;">logs</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`🧊 Bao Responsed! by :\`</span><span style="color:#24292E;">, tags.url);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// eslint-disable-next-line no-console</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#24292E;">(tags));</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">satisfies</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LoggerOptions</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="oninsert" tabindex="-1">onInsert <a class="header-anchor" href="#oninsert" aria-label="Permalink to &quot;onInsert&quot;">​</a></h3><p><code>onInsert</code> 会在你每次使用日志记录器记录日志时被调用，它必须是一个同步的方法。你需要返回 <code>true</code> 或 <code>false</code>。当你返回 <code>false</code> 时，此日志将丢弃。例如，你可以通过返回 <code>false</code>，来实现生产环境中，不记录 <code>debug</code> 等级的日志的功能。</p><p>我们建议你，不要在此方法中将日志持久化保存 (如写入文件、发送到各种日志系统中)。每次请求可能会有大量的日志需要写入，这将导致极其频繁的 IO，会带来性能下降。</p><p>我们建议你在 <code>onSubmit</code> 方法中再将日志持久化保存，只在此方法中将日志输出在控制台中，并判断此条日志是否需要丢弃。</p><h3 id="onsubmit" tabindex="-1">onSubmit <a class="header-anchor" href="#onsubmit" aria-label="Permalink to &quot;onSubmit&quot;">​</a></h3><p><code>onSubmit</code> 会在一个请求即将结束时被调用，它可以是一个异步的方法或者返回 <code>Promise</code>。你可以在此阶段，将关于此请求的有关的日志持久化保存。</p><p>它的参数包含了当前请求所被打上的日志标签，以及日志。</p>`,32),e=[p];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{u as __pageData,h as default};
