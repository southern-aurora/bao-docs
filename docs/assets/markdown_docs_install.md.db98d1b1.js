import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.064d4bf4.js";const h=JSON.parse('{"title":"安装","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/docs/install.md","filePath":"markdown/docs/install.md"}'),l={name:"markdown/docs/install.md"},p=n(`<h1 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h1><h2 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-label="Permalink to &quot;先决条件&quot;">​</a></h2><h3 id="bun" tabindex="-1">Bun <a class="header-anchor" href="#bun" aria-label="Permalink to &quot;Bun&quot;">​</a></h3><p>首先，你需要安装 Bun。Bun 是一个非常快的 JavaScript 运行时，而且和 NodeJs 兼容。你可以在 <a href="https://bun.sh/markdown/docs/installation" target="_blank" rel="noreferrer">这里</a> 找到安装方法。</p><p>由于 Bun 尚未拥有完整的 Windows 支持，因此，如果你使用 Windows 系统，我建议你使用 <a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noreferrer">WSL2</a> 来进行开发。</p><p>你可以通过安装 Visual Studio Code 的 <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noreferrer">WSL</a> 插件，来直接打开 WSL2 中的目录，并在 WSL2 中进行开发。</p><h3 id="co" tabindex="-1">CO <a class="header-anchor" href="#co" aria-label="Permalink to &quot;CO&quot;">​</a></h3><p><a href="https://github.com/southern-aurora/co" target="_blank" rel="noreferrer">CO</a> 是一个命令别名工具，你可以通过它来简化命令的输入。</p><p>除此以外，CO 还可以帮助你统一包管理器的命令。也许你有一些工程还在使用 NodeJs 的 npm，或者 yarn、pnpm 甚至 deno。CO 可以帮助你统一这些命令，让你不需要再记住这些命令的区别。</p><p>对于任何工程，你都可以简单地通过运行诸如 <code>co i lodash</code> 这样的命令来安装。</p><p>对于 Bao 而言，项目的启动与运行等命令，都是通过 CO 来执行的。</p><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h2><p>想要开始使用 Bao，你可以通过下载 Bao 的<a href="https://github.com/southern-aurora/bao-template" target="_blank" rel="noreferrer">模板</a>，或者直接使用 Git 来下载：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/southern-aurora/bao-template</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/southern-aurora/bao-template</span></span></code></pre></div><p>进入到模板目录中，运行 <code>co i</code> 来安装依赖。结束后，可运行 <code>co dev</code> 命令来启动开发服务器。</p><p>当开发服务器启动成功后，你可以快速通过命令来访问默认生成的示例接口：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--location</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--request</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">POST</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;http://localhost:9000/hello-world/say&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--header</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Content-Type: application/json&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--data-raw</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;{&quot;by&quot;:&quot;bao&quot;}&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">curl</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--location</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--request</span><span style="color:#24292E;"> </span><span style="color:#032F62;">POST</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;http://localhost:9000/hello-world/say&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--header</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;Content-Type: application/json&#39;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--data-raw</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;{&quot;by&quot;:&quot;bao&quot;}&#39;</span></span></code></pre></div><p>你将会得到如下的响应：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;json&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;success&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;youSay&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;hello world! (by bao)&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;json&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;success&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;youSay&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;hello world! (by bao)&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>刚刚访问的接口所对应的文件位于 <code>/src/app/hello-world/api.ts</code>，你可以随意编辑它。</p>`,20),e=[p];function t(r,c,i,d,y,E){return a(),o("div",null,e)}const b=s(l,[["render",t]]);export{h as __pageData,b as default};
