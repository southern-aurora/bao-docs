import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.0ef1d817.js";const h=JSON.parse('{"title":"Context","description":"","frontmatter":{},"headers":[],"relativePath":"markdown/docs/context.md","filePath":"markdown/docs/context.md"}'),l={name:"markdown/docs/context.md"},p=o(`<h1 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h1><p>context 是一个对象，它包含了当前请求的上下文信息。</p><p>除此以外，context 也相当于一个&quot;全局变量&quot;。你可以编写一个<a href="/bao/markdown/docs/middleware.html">Middleware</a>，在其中读取用户信息，并将其挂载到 <code>context.user</code> 中，而在 Api 中，直接通过 <code>context.user</code> 来获取当前用户的信息。</p><h2 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h2><p>context 的类型定义位于 <code>/src/context.ts</code> 中，你可以像下面这样，自由扩展它。</p><p>不过，我们要注意，你扩展了 context 的类型后，并不代表数据真的存在于 context 中。除了 context 的自带属性以外，你需要自己编写代码，来将数据挂载到 context 中。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// file: /src/context.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { FrameworkContext } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;southern-aurora-bao&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Context</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">user</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">email</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FrameworkContext</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// file: /src/context.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { FrameworkContext } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;southern-aurora-bao&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Context</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">user</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">email</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FrameworkContext</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="细节" tabindex="-1">细节 <a class="header-anchor" href="#细节" aria-label="Permalink to &quot;细节&quot;">​</a></h2><h3 id="必要属性" tabindex="-1">必要属性 <a class="header-anchor" href="#必要属性" aria-label="Permalink to &quot;必要属性&quot;">​</a></h3><p>在所有情况下，context 都包含以下属性：</p><ul><li><p><code>context.contextId</code>：当前请求的唯一标识符。</p></li><li><p><code>context.headers</code>：当前请求的头部信息。</p></li><li><p><code>context.path</code>: 当前请求的路径。(不包括前缀、URL Paramters)</p></li></ul><h3 id="非必要属性" tabindex="-1">非必要属性 <a class="header-anchor" href="#非必要属性" aria-label="Permalink to &quot;非必要属性&quot;">​</a></h3><p>除此之外，还拥有 <code>context.detail</code> 属性。它是一个对象，其中，包含了可能当前所处环境中不存在的信息。</p><p>尽管，Api 通常运行在 HTTP 环境当中，但 Api 被设计为了尽可能通用的方式。它也可以由其他方式运行，例如，通过命令行执行、抑或是其他微服务调用、甚至由其他 JavaScript 脚本调用等。</p><p>例如，当 Api 在 HTTP 环境中运行时，<code>context.detail</code> 包含以下属性：</p><ul><li><p><code>context.detail.request</code>：当前请求对象。</p></li><li><p><code>context.detail.response</code>：当前响应对象。</p></li><li><p><code>context.detail.ip</code>：当前请求的 ip 地址。</p></li><li><p><code>context.detail.fullurl</code>：当前请求的真实 URL 对象。</p></li></ul>`,16),e=[p];function t(c,r,i,E,y,d){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{h as __pageData,u as default};
